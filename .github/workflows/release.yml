name: Release Build (Vendored OpenSSL)
on:
  push:
    tags: ["v*"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    env:
      RUSTFLAGS: ""
      # Set the C linker for the respective target.
      RUSTC_LINKER: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
      # For vendored builds, openssl-sys needs a C compiler for the target.
      # CC_aarch64_unknown_linux_gnu tells a C build system (like 'cc' crate used by openssl-sys)
      # which compiler to use when building C code for that target. Set conditionally.
      CC_aarch64_unknown_linux_gnu: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract Version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Build Toolchain (AArch64 Target)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            build-essential # For make, perl, etc., required by OpenSSL's build system (runs on host)

      - name: Install Build Toolchain (x86_64 Target)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential # For native gcc, make, perl, etc. (for vendoring on host for host target)

      - name: Setup Rust Toolchain & Target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build Release Binary (Vendored OpenSSL)
        run: |
          set -eux
          echo "--- Build Environment ---"
          echo "Target: ${{ matrix.target }}"
          echo "Rustc Linker: $RUSTC_LINKER"
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            echo "CC_aarch64_unknown_linux_gnu: $CC_aarch64_unknown_linux_gnu"
          fi
          echo "-------------------------"
          # Assumes your Cargo.toml is correctly configured for vendoring OpenSSL.
          cargo build --release --target ${{ matrix.target }}

      - name: Inspect Artifacts
        run: |
          echo "Contents of target/${{ matrix.target }}/release:"
          ls -l target/${{ matrix.target }}/release
          echo "Executables:"
          find target/${{ matrix.target }}/release -maxdepth 1 -type f -perm -u+x

      - name: Package Binary
        run: |
          set -eux
          mkdir -p release
          # Ensure this binary name matches your actual output.
          # If your crate name in Cargo.toml is 'messy-folder-reorganizer-ai',
          # the binary name will likely be 'messy_folder_reorganizer_ai'.
          cp target/${{ matrix.target }}/release/messy_folder_reorganizer_ai release/
          tar czvf messy-folder-reorganizer-ai-${{ env.VERSION }}-${{ matrix.target }}.tar.gz \
            -C release messy_folder_reorganizer_ai

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: messy-folder-reorganizer-ai-${{ env.VERSION }}-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
